[
    {
        "id": "a9cf961a3a52160c",
        "type": "tab",
        "label": "Isolation Gowns",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f781100da59ddc5d",
        "type": "subflow",
        "name": "Sign Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "612e6762f465c1e6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 120,
                "wires": [
                    {
                        "id": "bc59db00aa1fe6b1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a1f23e7f9e7ee37e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "612e6762f465c1e6",
        "type": "function",
        "z": "f781100da59ddc5d",
        "name": "Generate Signature",
        "func": "const zenroom = global.get(\"zenroom\");\n\nconst encoded_variables = JSON.stringify(msg.variables)\n\nconst sign_script = `\nScenario eddsa: sign a graph query\nGiven I have a 'base64' named 'gql'\nGiven I have a 'keyring'\n\n# Fix Apollo's mingling with query string\nWhen I remove spaces in 'gql'\nand I compact ascii strings in 'gql'\n\nWhen I create the eddsa signature of 'gql'\nAnd I create the hash of 'gql'\n\nThen print 'eddsa signature' as 'base64'\nThen print 'gql' as 'base64'\nThen print 'hash' as 'hex'\n`;\n\n\nconst body = `{\"query\":\"${msg.sign.query}\", \"variables\":${encoded_variables}}`\n\nmsg.sign.zenKeys = `\n{\n    \"keyring\":\n    {\n        \"eddsa\": \"${msg.sign.eddsa}\"\n    }\n}`;\n    \nmsg.sign.zenData = `\n{\n    \"gql\": \"${Buffer.from(body, 'utf8').toString('base64')}\",\n}`;\n\nlet res = await zenroom.zencode_exec(sign_script, { data: msg.sign.zenData, keys: msg.sign.zenKeys})\n            .then((result) => {\n                const res = JSON.parse(result.result);\n                console.log(\"Msg signature: \", res);\n                return res;\n            }).catch((error) => {\n                console.error(\"Error in zenroom sign function: \", error);\n                return error;\n\n            });\n\nmsg.sign.signature = res;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "bc59db00aa1fe6b1"
            ]
        ]
    },
    {
        "id": "bc59db00aa1fe6b1",
        "type": "function",
        "z": "f781100da59ddc5d",
        "name": "Prepare request",
        "func": "// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\n\nmsg.headers['zenflows-sign'] = msg.sign.signature.eddsa_signature;\nmsg.headers['zenflows-user'] = msg.sign.username;\nmsg.headers['zenflows-hash'] = msg.sign.signature.hash;\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\n\n// This is going to destroy the msg.payload!!!\n// msg.payload = msg.sign.body;\nmsg.payload = JSON.stringify({\n    query: msg.sign.query,\n    variables: msg.variables\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b582df30a9d2445c",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 900,
        "wires": []
    },
    {
        "id": "d77006acee54af34",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "Form",
        "url": "/interfacer/getHMAC",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "01f2e8dd1ac14440"
            ]
        ]
    },
    {
        "id": "01f2e8dd1ac14440",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Get HMAC",
        "func": "\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst variables = {\n    \"firstRegistration\": true,\n    \"userData\": \"{\\\"email\\\": \\\"\" + msg.payload.email + \"\\\"}\"\n};\n\n// To get this in the debug output\nmsg.variables = variables\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query: `mutation ($firstRegistration: Boolean!, $userData: String!){\n  \n    keypairoomServer(firstRegistration: $firstRegistration, userData: $userData)\n      \n  }`,\n  variables: variables\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "ced9f63df845af74",
                "beadd72e20548fee"
            ]
        ]
    },
    {
        "id": "ced9f63df845af74",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "beadd72e20548fee",
                "bbeba4dd2bc281e6"
            ]
        ]
    },
    {
        "id": "6b9a303ec68aaf47",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Data to sign",
        "func": "// Call specific data\nconst label = msg.payload.label;\nconst symbol = msg.payload.symbol;\n\n// Produce the query and variables vars to be signed\nconst variables = {\"unit\": {\n                        \"label\": label,\n                        \"symbol\": symbol\n                        }\n            };\n\n\nconst query = `mutation($unit:UnitCreateParams!) {\n            createUnit(unit: $unit) {\n                unit {\n                    id\n                }\n            }\n          }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 520,
        "wires": [
            [
                "cafeb261165160b1",
                "9a42dde3957dd0ad"
            ]
        ]
    },
    {
        "id": "41a31f091965c362",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 630,
        "y": 520,
        "wires": [
            [
                "9a42dde3957dd0ad",
                "7e3394bb6ca1da06"
            ]
        ]
    },
    {
        "id": "e7f96084acdd0aa2",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Create Process",
        "func": "// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['authorization'] = \"Bearer \" + msg.payload.token;\n\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst name = msg.payload.process_name;\nconst note = msg.payload.process_note;\n\nconst ts = new Date(Date.now());\n\nconst variables = {\n      \"process\": {\n        \"name\": name,\n        \"note\": note,\n        \"hasBeginning\": ts,\n        \"hasEnd\": ts\n      }\n  };\n\n// To get this in the debug output\nmsg.variables = variables\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query: `mutation($process:ProcessCreateParams!) {\n\t  createProcess(process: $process) {\n\t\tprocess {\n\t\t  id\n\t\t}\n\t  }\n\t}\n`,\n  variables: variables\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 980,
        "wires": [
            [
                "cf36936a5c75bfd6"
            ]
        ]
    },
    {
        "id": "6196df0943914213",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "bbeba4dd2bc281e6",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "// Read the payload\nvar seed = msg.payload.data.keypairoomServer;\n\n// Provide an answer\nmsg.payload = {};\nmsg.payload.seed = seed;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "6196df0943914213"
            ]
        ]
    },
    {
        "id": "cf3e88999b724618",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Get server seed",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "9927f0b45d15344b",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createUnit",
        "url": "/interfacer/createUnit",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "6b9a303ec68aaf47"
            ]
        ]
    },
    {
        "id": "7e3394bb6ca1da06",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "// Read the payload\nconst unit = msg.payload.data.createUnit.unit.id;\n\nmsg.payload = {};\nmsg.payload.unit = unit;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "71f92c67ca67af48"
            ]
        ]
    },
    {
        "id": "71f92c67ca67af48",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "72c05c5c0bd10d12",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 840,
        "wires": []
    },
    {
        "id": "04c370bd35360547",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const eventId = msg.payload.data.createEconomicEvent.economicEvent.id;\nconst resourceId = msg.payload.data.createEconomicEvent.economicResource.id;\n\n\nmsg.payload = {};\nmsg.payload.eventId = eventId;\nmsg.payload.resourceId = resourceId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 840,
        "wires": [
            [
                "72c05c5c0bd10d12"
            ]
        ]
    },
    {
        "id": "75ad1ae27b0775fb",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 650,
        "y": 840,
        "wires": [
            [
                "b582df30a9d2445c",
                "04c370bd35360547"
            ]
        ]
    },
    {
        "id": "62fcaf5db019d842",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Data to sign",
        "func": "// Call specific data\nconst agent_id = msg.payload.agent_id;\nconst resource_id = msg.payload.resource_id;\nconst resource_name = msg.payload.resource_name;\nconst unit_id = msg.payload.unit_id;\nconst amount = msg.payload.amount;\nconst classification = msg.payload.classification;\n\n// Produce the query and variables vars to be signed\nconst ts = new Date(Date.now());\n\nconst variables = {\n        \"event\": {\n            \"note\": \"update event\",\n            \"action\": \"raise\",\n            \"provider\": agent_id, \n            \"receiver\": agent_id,\n            \"hasPointInTime\" : ts,\n            \"resourceQuantity\": {\n              \"hasUnit\": unit_id, \n              \"hasNumericalValue\": amount \n            },\n            \"resourceConformsTo\": classification\n        },\n        \"newInventoriedResource\": { \n            \"name\": resource_name,\n            \"trackingIdentifier\": resource_id\n        }\n};\n\nconst query = `mutation($event:EconomicEventCreateParams!, $newInventoriedResource:EconomicResourceCreateParams) {\n                createEconomicEvent(event:$event, newInventoriedResource:$newInventoriedResource) {\n                    economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                    }\n                }\n            }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 840,
        "wires": [
            [
                "b582df30a9d2445c",
                "d4a01c7ff1aa60f2"
            ]
        ]
    },
    {
        "id": "13197e6bea34f939",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createResource",
        "url": "/interfacer/createResource",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "62fcaf5db019d842"
            ]
        ]
    },
    {
        "id": "ec61e56c21eb3e9f",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const processId = msg.payload.data.createProcess.process.id;\n\n\nmsg.payload = {};\nmsg.payload.processId = processId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 980,
        "wires": [
            [
                "c3e3e6232d39d1b6"
            ]
        ]
    },
    {
        "id": "cf36936a5c75bfd6",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 980,
        "wires": [
            [
                "6905f51ee38526b3",
                "ec61e56c21eb3e9f"
            ]
        ]
    },
    {
        "id": "c3e3e6232d39d1b6",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 980,
        "wires": []
    },
    {
        "id": "6905f51ee38526b3",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b82c72a08c1a9fde",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createProcess",
        "url": "/interfacer/createProcess",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "e7f96084acdd0aa2"
            ]
        ]
    },
    {
        "id": "71e1a605b5ded04e",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ec313c7bf8cd91cf",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const eventID = msg.payload.data.createEconomicEvent.economicEvent.id;\n\nconst transferredID = msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs.id;\n\n\nmsg.payload = {};\nmsg.payload.eventId = eventID;\nmsg.payload.transferredID = transferredID;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1120,
        "wires": [
            [
                "71e1a605b5ded04e"
            ]
        ]
    },
    {
        "id": "1f51d816c9254a8e",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 1120,
        "wires": [
            [
                "78bbd41a6c118d6b",
                "ec313c7bf8cd91cf"
            ]
        ]
    },
    {
        "id": "78bbd41a6c118d6b",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1180,
        "wires": []
    },
    {
        "id": "26c12da433641d7d",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createTransfer",
        "url": "/interfacer/createTransfer",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "e6a4ec239be873e1"
            ]
        ]
    },
    {
        "id": "e6a4ec239be873e1",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Transfer Custody",
        "func": "// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['authorization'] = \"Bearer \" + msg.payload.token;\n\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst note = msg.payload.note;\nconst provider_id = msg.payload.provider_id;\nconst receiver_id = msg.payload.receiver_id;\nconst resource_id = msg.payload.resource_id;\nconst unit_id = msg.payload.unit_id;\nconst amount = msg.payload.amount;\nconst location_id = msg.payload.location_id;\n\nconst ts = new Date(Date.now());\nconst variables = {\n        \"event\": {\n            \"note\": note,\n            \"action\": \"transfer-custody\",\n            \"provider\": provider_id, \n            \"receiver\": receiver_id, \n            \"resourceInventoriedAs\": resource_id,\n            \"hasPointInTime\": ts,\n            \"atLocation\": location_id,\n            \"resourceQuantity\": {\n              \"hasUnit\": unit_id, \n              \"hasNumericalValue\": amount \n            }\n        }\n    };\n    \n// To get this in the debug output\nmsg.variables = variables;\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query:    `mutation($event:EconomicEventCreateParams!) {\n                createEconomicEvent(event:$event) {\n                    economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                        toResourceInventoriedAs { \n                            id\n                            name\n                            onhandQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            accountingQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            primaryAccountable {\n                            id\n                          }\n                        }\n                        resourceInventoriedAs {\n                            id\n                            name\n                            onhandQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            accountingQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            primaryAccountable {\n                            id\n                          }\n                        }\n                    }\n                }\n            }`,\n    variables: variables\n})\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1120,
        "wires": [
            [
                "1f51d816c9254a8e",
                "78bbd41a6c118d6b"
            ]
        ]
    },
    {
        "id": "fe5db33a07f08de1",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d1f6e59d5ba1e759",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const eventId = msg.payload.data.createEconomicEvent.economicEvent.id;\n\nvar resourceId = null;\n\nif ( msg.payload.data.createEconomicEvent.economicResource != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicResource.id;\n}else if ( msg.payload.data.createEconomicEvent.economicEvent.resourceInventoriedAs != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicEvent.resourceInventoriedAs.id;\n}else if (msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs;\n}\n\nmsg.payload = {};\nmsg.payload.eventId = eventId;\n\nif (resourceId != null){\n    msg.payload.resourceId = resourceId;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1240,
        "wires": [
            [
                "fe5db33a07f08de1"
            ]
        ]
    },
    {
        "id": "9395b1d5f101d921",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "2fdd738ccee21e9c",
                "d1f6e59d5ba1e759"
            ]
        ]
    },
    {
        "id": "1239e8ccc0e65584",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Create Event",
        "func": "// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['authorization'] = \"Bearer \" + msg.payload.token;\n\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nvar variables = {\n        \"event\": {\n            \"note\": msg.payload.note,\n            \"action\": msg.payload.action\n        }\n};\n\nvariables.event.hasPointInTime = new Date(Date.now());\n\nif ( msg.payload.provider_id != undefined ){\n    variables.event.provider = msg.payload.provider_id;\n}\n\nif ( msg.payload.receiver_id != undefined ){\n    variables.event.receiver = msg.payload.receiver_id;\n}\n\nif ( msg.payload.processIn_id != undefined ){\n    variables.event.inputOf = msg.payload.processIn_id;\n}\n\nif ( msg.payload.processOut_id != undefined ){\n    variables.event.outputOf = msg.payload.processOut_id;\n}\n\nif ( msg.payload.unit_id != undefined && msg.payload.amount != undefined){\n    variables.event.resourceQuantity = {};\n    variables.event.resourceQuantity.hasUnit = msg.payload.unit_id;\n    variables.event.resourceQuantity.hasNumericalValue = msg.payload.amount;\n}\n\nif ( msg.payload.resource_id != undefined ){\n    variables.event.resourceInventoriedAs = msg.payload.resource_id;\n}\n\nif ( msg.payload.classification != undefined ){\n    variables.event.resourceConformsTo = msg.payload.classification;\n}\n\nif ( msg.payload.resource_name != undefined ){\n    variables.newInventoriedResource = {};\n    variables.newInventoriedResource.name = msg.payload.resource_name;\n}\n\nif ( msg.payload.resourcetrack_id != undefined ){\n    // we imply here that there is also a resource_name, otherwise bomb\n    variables.newInventoriedResource.trackingIdentifier = msg.payload.resourcetrack_id;\n}\n\n\n\n// To get this in the debug output\nmsg.variables = variables\n\nconst resource_quantity = `\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n\n`;\n\nconst resource_body = `\n                            id\n                            name\n                            onhandQuantity {` +\n                                resource_quantity +\n                            `}\n                            accountingQuantity {` +\n                                resource_quantity +\n                            `}\n                            primaryAccountable {\n                            id\n                          }\n`;\n\nconst response = `economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                        toResourceInventoriedAs {` +\n                            resource_body +\n                        `}\n                        resourceInventoriedAs {` +\n                            resource_body +\n                        `\n                        }\n                    },\n                    economicResource {` +\n                        resource_body +\n                    `}\n                    `;\n                    \nvar mutation = '';\n\nif (variables.newInventoriedResource != undefined){\n    mutation = `mutation($event:EconomicEventCreateParams!, $newInventoriedResource: EconomicResourceCreateParams) {\n                createEconomicEvent(event:$event, newInventoriedResource:$newInventoriedResource) {` +\n                    response +\n                `}\n            }`;\n}else{\n    mutation = `mutation($event:EconomicEventCreateParams!) {\n                createEconomicEvent(event:$event) {` +\n                    response +\n                `}\n            }`;\n}\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n    query:    mutation,\n    variables: variables\n})\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1240,
        "wires": [
            [
                "9395b1d5f101d921",
                "2fdd738ccee21e9c"
            ]
        ]
    },
    {
        "id": "2fdd738ccee21e9c",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1300,
        "wires": []
    },
    {
        "id": "1b77e1551252bd55",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createEvent",
        "url": "/interfacer/createEvent",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "1239e8ccc0e65584",
                "2fdd738ccee21e9c"
            ]
        ]
    },
    {
        "id": "17b272e3686339f5",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1360,
        "wires": []
    },
    {
        "id": "30c22066ef8321d8",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const trace = msg.payload.data.economicResource.trace\nconst track = msg.payload.data.economicResource.track\n\n\nmsg.payload = {};\nmsg.payload.trace = trace;\nmsg.payload.track = track;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1360,
        "wires": [
            [
                "17b272e3686339f5"
            ]
        ]
    },
    {
        "id": "9b5733fa43a0796d",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 1360,
        "wires": [
            [
                "04a7b53f4308dcdd",
                "30c22066ef8321d8"
            ]
        ]
    },
    {
        "id": "2db04210e5b35643",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Trace & Track",
        "func": "// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['authorization'] = \"Bearer \" + msg.payload.token;\n\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nvar variables = {\n    \"id\": msg.payload.resource_id,\n    \"recurseLimit\": msg.payload.recursion,\n\n};\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query:    `query($id:ID!, $recurseLimit:Int!) {\n                economicResource(id: $id) {\n                    trace(recurseLimit: $recurseLimit) {...trace}\n                    track(recurseLimit: $recurseLimit) {...track}\n                }\n\n            }\n\n            fragment unit on Unit {\n                id symbol label\n            }\n\n            fragment measure on Measure {\n                hasUnit {...unit}\n                hasNumericalValue\n            }\n\n            fragment spatialThing on SpatialThing {\n                id\n                name\n                mappableAddress\n                note\n                geom\n                lat alt long\n            }\n\n            fragment economicResource on EconomicResource {\n                id\n                resourceName: name\n                note\n                primaryAccountable {id name displayUsername}\n                onhandQuantity {...measure}\n                accountingQuantity {...measure}\n                currentLocation {...spatialThing}\n                trackingIdentifier\n            }\n\n            fragment economicEvent on EconomicEvent {\n                id\n                action {id}\n                provider {id name displayUsername}\n                receiver {id name displayUsername}\n                resourceQuantity {...measure}\n                resourceClassifiedAs\n                resourceInventoriedAs {...economicResource}\n                note\n            }\n\n            fragment process on Process {\n                id\n                processName: name\n                note\n                inputs {...economicEvent}\n                outputs {...economicEvent}\n            }\n\n            fragment track on ProductionFlowItem {\n                ... on EconomicResource {__typename ...economicResource}\n                ... on EconomicEvent {__typename ...economicEvent}\n                ... on Process {__typename ...process}\n            }\n\n            fragment trace on ProductionFlowItem {\n                ... on EconomicResource {__typename ...economicResource}\n                ... on EconomicEvent {__typename ...economicEvent}\n                ... on Process {__typename ...process}\n}`,\n    variables: variables\n})\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1360,
        "wires": [
            [
                "9b5733fa43a0796d"
            ]
        ]
    },
    {
        "id": "04a7b53f4308dcdd",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1420,
        "wires": []
    },
    {
        "id": "dc031adaa1b0f61b",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "traceTrack",
        "url": "/interfacer/traceTrack",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1360,
        "wires": [
            [
                "2db04210e5b35643"
            ]
        ]
    },
    {
        "id": "5ecbcce4000d69b9",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create units of measurements for resources",
        "info": "",
        "x": 210,
        "y": 480,
        "wires": []
    },
    {
        "id": "c3577fc8fe24f2f3",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create resources",
        "info": "",
        "x": 120,
        "y": 800,
        "wires": []
    },
    {
        "id": "bd48eea69ad3c686",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create process to encapsulate events",
        "info": "",
        "x": 190,
        "y": 940,
        "wires": []
    },
    {
        "id": "ca0a726a4281a41b",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create event Transfer-custody",
        "info": "",
        "x": 160,
        "y": 1080,
        "wires": []
    },
    {
        "id": "12a3dd4123e21dbd",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create events with other actions",
        "info": "",
        "x": 170,
        "y": 1200,
        "wires": []
    },
    {
        "id": "21e3ef708e289378",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 780,
        "wires": []
    },
    {
        "id": "383d01758c0eab1c",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 650,
        "y": 720,
        "wires": [
            [
                "21e3ef708e289378",
                "dea2dc586e075728"
            ]
        ]
    },
    {
        "id": "a9dec105802ab695",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Data to sign",
        "func": "// Call specific data\nconst unit_id = msg.payload.unit_id;\nconst name = msg.payload.name;\nconst note = msg.payload.note;\nconst classification = msg.payload.classification;\n\n// Produce the query and variables vars to be signed\nconst ts = new Date(Date.now());\n\nconst variables = {\n        \"resourceSpecification\": {\n            \"defaultUnitOfResource\": unit_id,\n            \"name\": name,\n            \"note\": note,\n            \"resourceClassifiedAs\": classification\n\t    }\n    };\n\n\nconst query = `mutation ($resourceSpecification:ResourceSpecificationCreateParams!){\n  \t            createResourceSpecification(resourceSpecification:$resourceSpecification){\n                    resourceSpecification{\n                        id,\n                        name\n                    }\n                }\n            }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "21e3ef708e289378",
                "1953a01fc897eb9c"
            ]
        ]
    },
    {
        "id": "dea2dc586e075728",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "const specId = msg.payload.data.createResourceSpecification.resourceSpecification.id;\n\n\nmsg.payload = {};\nmsg.payload.specId = specId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 720,
        "wires": [
            [
                "1e377a5f89c87589"
            ]
        ]
    },
    {
        "id": "525b857facb27517",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createResourceSpec",
        "url": "/interfacer/createResourceSpec",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "a9dec105802ab695"
            ]
        ]
    },
    {
        "id": "1e377a5f89c87589",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "b1049f596fbf4e40",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create resources specification",
        "info": "",
        "x": 160,
        "y": 660,
        "wires": []
    },
    {
        "id": "beadd72e20548fee",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 140,
        "wires": []
    },
    {
        "id": "930cd99125d1479e",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 240,
        "wires": []
    },
    {
        "id": "8966a452ab67cbcd",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "// Read the payload\nvar id = msg.payload.data.createPerson.agent.id;\n\n// Provide an answer\nmsg.payload = {};\nmsg.payload.id = id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "930cd99125d1479e"
            ]
        ]
    },
    {
        "id": "4f5171cd09d1c858",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 240,
        "wires": [
            [
                "12b72845a3237505",
                "8966a452ab67cbcd"
            ]
        ]
    },
    {
        "id": "7f1cc66a89c6fe15",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Create Person",
        "func": "\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['zenflows-admin'] = msg.payload.key;\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst variables = {\n    \"person\": {\n        \"name\": msg.payload.name,\n        \"user\": msg.payload.username,\n        \"email\": msg.payload.email,\n        \"eddsaPublicKey\": msg.payload.eddsaPublicKey\n    }\n};\n\n// To get this in the debug output\nmsg.variables = variables\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query: `mutation ($person: PersonCreateParams!){\n        createPerson(person: $person)\n        {\n            agent{\n                id\n                name\n                user\n                email\n                eddsaPublicKey\n            }\n        }\n    }`,\n  variables: variables\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "4f5171cd09d1c858",
                "12b72845a3237505"
            ]
        ]
    },
    {
        "id": "12b72845a3237505",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "2bf52a3634071bdb",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createPerson",
        "url": "/interfacer/createPerson",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "7f1cc66a89c6fe15"
            ]
        ]
    },
    {
        "id": "aedd97c488d9aa52",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create agents",
        "info": "",
        "x": 110,
        "y": 200,
        "wires": []
    },
    {
        "id": "f114999c5ae92baa",
        "type": "http response",
        "z": "a9cf961a3a52160c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 360,
        "wires": []
    },
    {
        "id": "89d96141b31db3d3",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Format Reply",
        "func": "// Read the payload\nconst location = msg.payload.data.createSpatialThing.spatialThing.id;\n\nmsg.payload = {};\nmsg.payload.location = location;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 360,
        "wires": [
            [
                "f114999c5ae92baa"
            ]
        ]
    },
    {
        "id": "316ee28d745a44e4",
        "type": "http request",
        "z": "a9cf961a3a52160c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "08da7da1110298ac",
                "89d96141b31db3d3"
            ]
        ]
    },
    {
        "id": "299bbb363c0afa96",
        "type": "function",
        "z": "a9cf961a3a52160c",
        "name": "Data to sign",
        "func": "// Call specific data\nconst name = msg.payload.name;\nconst lat = msg.payload.lat;\nconst long = msg.payload.long;\nconst addr = msg.payload.addr;\nconst note = msg.payload.note;\n\n// Produce the query and variables vars to be signed\nconst variables = {\n        \"location\": {\n            \"name\": name,\n            \"alt\": 0,\n            \"lat\": lat,\n            \"long\": long,\n            \"mappableAddress\": addr,\n            \"note\": note\n        }\n    };\n\nconst query = `mutation($location: SpatialThingCreateParams!) {\n            createSpatialThing(spatialThing: $location) {\n                spatialThing {\n                    id\n                }\n            }\n        }`;\n    \n// Store the variables for later processing\nmsg.variables = variables\n\n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "9ef6d03550d0dddf",
                "08da7da1110298ac"
            ]
        ]
    },
    {
        "id": "08da7da1110298ac",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "ac77678c4d67fdde",
        "type": "http in",
        "z": "a9cf961a3a52160c",
        "name": "createLocation",
        "url": "/interfacer/createLocation",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "299bbb363c0afa96"
            ]
        ]
    },
    {
        "id": "5a3e26e2ecdf2fef",
        "type": "comment",
        "z": "a9cf961a3a52160c",
        "name": "Create locations for agents",
        "info": "",
        "x": 150,
        "y": 320,
        "wires": []
    },
    {
        "id": "9ef6d03550d0dddf",
        "type": "subflow:f781100da59ddc5d",
        "z": "a9cf961a3a52160c",
        "name": "",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "316ee28d745a44e4",
                "08da7da1110298ac"
            ]
        ]
    },
    {
        "id": "cafeb261165160b1",
        "type": "subflow:f781100da59ddc5d",
        "z": "a9cf961a3a52160c",
        "name": "",
        "x": 450,
        "y": 520,
        "wires": [
            [
                "41a31f091965c362",
                "9a42dde3957dd0ad"
            ]
        ]
    },
    {
        "id": "9a42dde3957dd0ad",
        "type": "debug",
        "z": "a9cf961a3a52160c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 620,
        "wires": []
    },
    {
        "id": "1953a01fc897eb9c",
        "type": "subflow:f781100da59ddc5d",
        "z": "a9cf961a3a52160c",
        "name": "",
        "x": 490,
        "y": 720,
        "wires": [
            [
                "383d01758c0eab1c",
                "21e3ef708e289378"
            ]
        ]
    },
    {
        "id": "d4a01c7ff1aa60f2",
        "type": "subflow:f781100da59ddc5d",
        "z": "a9cf961a3a52160c",
        "name": "",
        "x": 490,
        "y": 840,
        "wires": [
            [
                "75ad1ae27b0775fb"
            ]
        ]
    }
]